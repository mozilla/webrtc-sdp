language: rust
cache: cargo
sudo: true
os:
  - linux
  - osx

env:
  - FEATURES=""
  - FEATURES="serialize"
rust:
  - nightly
  - beta
  - stable
  # mimimum stable version because we use init shorthand
  - 1.17.0

matrix:
  allow_failures:
    - rust: nightly

addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - zlib1g-dev
      - libiberty-dev
      - libelf-dev
      - libdw-dev
      - cmake
      - gcc
      - binutils-dev

# Add clippy
before_script:
  - export PATH=$PATH:~/.cargo/bin
  - |
    if [[ "$TRAVIS_RUST_VERSION" == "nightly" ]]; then
      cargo install --force clippy;
    fi

script:
  - echo FEATURES="$FEATURES"
  - cargo build --verbose --all --features="$FEATURES"
  - |
    if [[ "$TRAVIS_RUST_VERSION" == "nightly" &&
      -f ~/.cargo/bin/cargo-clippy ]]; then
      cargo clippy;
    fi
  - cargo test --verbose --all

after_success:
  - |
      if [[ "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_RUST_VERSION" == "stable" && "$FEATURES" == "serialize" ]]; then
        wget https://github.com/SimonKagstrom/kcov/archive/v34.tar.gz &&
        tar xzf v34.tar.gz &&
        cd kcov-34 &&
        mkdir build &&
        cd build &&
        cmake .. &&
        make &&
        sudo make install &&
        cd ../.. &&
        rm -rf kcov-34 &&
        kcov --version &&
        (cd target/debug/ && ls -al) &&
        for file in target/debug/rsdparsa-*[^\.d]; do echo "$file"; mkdir -p "target/cov/$(basename $file)"; kcov --verify --exclude-pattern=/.cargo,/usr/lib "target/cov/$(basename $file)" "$file"; done &&
        for file in target/debug/unit_tests-*[^\.d]; do echo "$file"; mkdir -p "target/cov/$(basename $file)"; kcov --verify --exclude-pattern=/.cargo,/usr/lib "target/cov/$(basename $file)" "$file"; done &&
        bash <(curl -s https://codecov.io/bash) &&
        echo "Uploaded code coverage"
      fi
